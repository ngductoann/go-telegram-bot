package usecase

import (
	"context"
	"fmt"
	"time"

	"go-telegram-bot/internal/domain/entity"
	domainService "go-telegram-bot/internal/domain/service"
	"go-telegram-bot/internal/shared/util"
)

type HelpUseCase struct {
	telegramBot domainService.TelegramBotService
	logger      domainService.Logger
}

func NewHelpUseCase(telegramBot domainService.TelegramBotService, logger domainService.Logger) *HelpUseCase {
	return &HelpUseCase{
		telegramBot: telegramBot,
		logger:      logger,
	}
}

func (h *HelpUseCase) Execute(ctx context.Context, chatID int64) error {
	message := fmt.Sprintf(
		"üìñ *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot IP*\n\n"+
			"üîπ `%s` \\- L·∫•y th√¥ng tin IP hi·ªán t·∫°i:\n"+
			"   ‚Ä¢ Local IP: ƒê·ªãa ch·ªâ IP trong m·∫°ng n·ªôi b·ªô\n"+
			"   ‚Ä¢ WAN IP: ƒê·ªãa ch·ªâ IP c√¥ng khai tr√™n Internet\n"+
			"üîπ `%s` \\- Hi·ªÉn th·ªã l·ªùi ch√†o v√† c√°c l·ªánh c∆° b·∫£n\n"+
			"üîπ `%s` \\- Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y\n\n"+
			"‚ÑπÔ∏è *L∆∞u √Ω:* Bot s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t th√¥ng tin IP m·ªói khi b·∫°n g·ªçi l·ªánh\\.",
		util.EscapeMarkdownV2("/home_ip"),
		util.EscapeMarkdownV2("/start"),
		util.EscapeMarkdownV2("/help"),
	)

	botMsg := &entity.BotMessage{
		ChatID:      chatID,
		Text:        message,
		SentAt:      time.Now().Unix(),
		Command:     "/help",
		MessageType: entity.MessageTypeInfo,
		ParseMode:   "MarkdownV2",
	}

	if err := h.telegramBot.SendBotMessage(ctx, botMsg); err != nil {
		return fmt.Errorf("failed to send help message: %w", err)
	}
	return nil
}
