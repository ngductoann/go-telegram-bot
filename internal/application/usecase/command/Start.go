package usecase

import (
	"context"
	"fmt"

	"go-telegram-bot/internal/domain/service"
	"go-telegram-bot/internal/domain/types"
	"go-telegram-bot/internal/shared/util"
)

// StartHandler handles the /start command
func StartHandler(
	ctx context.Context,
	chatID types.TelegramChatID,
	bot service.TelegramBotService,
) (*types.SendMessageResponse, error) {
	message := fmt.Sprintf("*%s*\n\nðŸ¤– *%s*\n"+
		"â€¢ `%s` \\- Xem thÃ´ng tin IP local vÃ  WAN cá»§a mÃ¡y\n"+
		"â€¢ `%s` \\- Hiá»ƒn thá»‹ hÆ°á»›ng dáº«n sá»­ dá»¥ng\n",
		util.EscapeMarkdownV2("ðŸ‘‹ ChÃ o má»«ng báº¡n Ä‘áº¿n vá»›i Bot IP!"),
		util.EscapeMarkdownV2("CÃ¡c lá»‡nh cÃ³ sáºµn:"),
		util.EscapeMarkdownV2("/home_ip"),
		util.EscapeMarkdownV2("/help"),
	)

	parseMode := types.ParseModeMarkdownV2
	response, err := bot.SendMessageWithResponse(ctx, &types.SendMessageRequest{
		ChatID:    chatID,
		Text:      message,
		ParseMode: &parseMode,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to send start message: %w", err)
	}

	return response, nil
}
