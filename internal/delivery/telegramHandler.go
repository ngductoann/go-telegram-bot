package delivery

import (
	"context"
	"log"
	"time"

	"go-telegram-bot/internal/domain/entity"
	domainService "go-telegram-bot/internal/domain/service"
)

// telegramHandler handles Telegram bot updates and commands
type telegramHandler struct {
	botUseCase domainService.BotUseCase
	bot        domainService.TelegramBotService
}

// NewTelegramHandler creates a new instance of telegramHandler
func NewTelegramHandler(botUseCase domainService.BotUseCase, bot domainService.TelegramBotService) *telegramHandler {
	return &telegramHandler{
		botUseCase: botUseCase,
		bot:        bot,
	}
}

// StartPolling starts polling for updates from Telegram
func (h *telegramHandler) StartPolling(ctx context.Context) error {
	log.Println("ü§ñ Starting to poll for Telegram updates...")

	var offset int64 = 0

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë Bot ƒëang d·ª´ng...")
			return ctx.Err()
		default:
			// L·∫•y updates t·ª´ Telegram
			updates, err := h.bot.GetUpdates(ctx, offset)
			if err != nil {
				// Only log non-timeout errors as errors
				log.Printf("‚ö†Ô∏è  L·ªói khi l·∫•y updates (s·∫Ω retry): %v", err)
				time.Sleep(5 * time.Second) // ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
				continue
			}

			// X·ª≠ l√Ω t·ª´ng update
			for _, update := range updates {
				// C·∫≠p nh·∫≠t offset ƒë·ªÉ kh√¥ng nh·∫≠n l·∫°i update c≈©
				if update.UpdateID >= offset {
					offset = update.UpdateID + 1
				}

				// X·ª≠ l√Ω update trong goroutine ri√™ng ƒë·ªÉ kh√¥ng block
				go func(update entity.TelegramUpdate) {
					updateCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
					defer cancel()

					if err := h.botUseCase.ProcessUpdate(updateCtx, update); err != nil {
						log.Printf("‚ùå L·ªói khi x·ª≠ l√Ω update %d: %v", update.UpdateID, err)
					}
				}(update)
			}

			// Ngh·ªâ ng·∫Øn ƒë·ªÉ kh√¥ng spam API
			if len(updates) == 0 {
				time.Sleep(1 * time.Second)
			}
		}
	}
}
